))
}
maketraindf_pmi <- function(df){
df %>% filter(pmi_edge_sum==T) %>%
mutate(y = as.factor(acc),
class_pair=class12,
simple_POS_pair=simple_POS_12,
POS1 = XPOS1,
POS2 = XPOS2,
POS_pair = XPOS12) %>%
select(c(y #,gold_edge,sentence_index,pmi_edge_sum,pmi_edge_none,pmi_edge_tril,pmi_edge_triu
,lin_dist,simple_POS_1,simple_POS_2,i1,i2,w1,w2
,class1,class2
#,relation
,pmi_tril,pmi_triu,pmi_sum
#,UPOS12,UPOS1,UPOS2
#,class12,simple_POS_12,XPOS1,XPOS2,XPOS12 # these ones are just renamed
,class_pair,simple_POS_pair#,POS1,POS2,POS_pair # as these
))
}
maketraindf_all <- function(df){
df %>%
mutate(y = as.factor(acc),
class_pair=class12,
simple_POS_pair=simple_POS_12,
POS1 = XPOS1,
POS2 = XPOS2,
POS_pair = XPOS12) %>%
select(c(y #,gold_edge,sentence_index,pmi_edge_sum,pmi_edge_none,pmi_edge_tril,pmi_edge_triu
,lin_dist,simple_POS_1,simple_POS_2,i1,i2,w1,w2
,class1,class2
,relation
,pmi_tril,pmi_triu,pmi_sum
#,UPOS12,UPOS1,UPOS2
#,class12,simple_POS_12,XPOS1,XPOS2,XPOS12 # these ones are just renamed
,class_pair,simple_POS_pair#,POS1,POS2,POS_pair # as these
))
}
maketraindf_norelation <- function(df){
df %>%
mutate(y = as.factor(acc),
class_pair=class12,
simple_POS_pair=simple_POS_12,
POS1 = XPOS1,
POS2 = XPOS2,
POS_pair = XPOS12) %>%
select(c(y #,gold_edge,sentence_index,pmi_edge_sum,pmi_edge_none,pmi_edge_tril,pmi_edge_triu
,lin_dist,simple_POS_1,simple_POS_2,i1,i2,w1,w2
,class1,class2
#,relation
,pmi_tril,pmi_triu,pmi_sum
#,UPOS12,UPOS1,UPOS2
#,class12,simple_POS_12,XPOS1,XPOS2,XPOS12 # these ones are just renamed
,class_pair,simple_POS_pair#,POS1,POS2,POS_pair # as these
))
}
runrf <- function(df,name,mtry=3,min.node.size=1){
ptm <- proc.time()
training.df = df
# ranger.fit = train(
#   y = training.df$acc,
#   x = training.df %>% select(-acc),
#   method = 'ranger',
#   num.trees = 500,
#   tuneGrid = expand.grid(mtry = c(3,4,5,6),
#                          splitrule = c("gini"),
#                          min.node.size = c(1,2)),
#   trControl = trainControl(
#     search = "grid", method = "cv", number = 5, verboseIter = TRUE)
# )
# print(ranger.fit)
# print(ranger.fit$bestTune)
# Run best fit model
rf <- ranger(
y ~ ., local.importance = FALSE,
mtry = mtry, num.trees = 2000, min.node.size = min.node.size, splitrule = "gini",
importance = "impurity_corrected", save.memory = TRUE,
data = training.df,
)
library(gridExtra)
cm <- rf$confusion.matrix
print(proc.time() - ptm)
# print(importance_pvalues(rf, method = "janitza"))
print(cm)
return(gg_varimp(rf,name))
}
xlnet.symdif <- symdif(xlnet)
bert.symdif <- symdif(bert)
xlm.symdif <- symdif(xlm)
bert.symdif %>% mutate(acc=which)
names(bert.symdif %>% mutate(acc=which))
names(bert.symdif %>% mutate(acc=which)$acc)
bert.symdif %>% mutate(acc=which)$acc
(bert.symdif %>% mutate(acc=which))$acc
View(xlnet.symdif)
tyble(xlnet.symdif)
??tyble
tabyl
bert.symdif %>% group_by(which,acc) %>% count()
bert.symdif %>% group_by(which,relation) %>% count()
bert.symdif %>% group_by(which,relation) %>% count() %>% group_by(relation) %>% summarize(n())
bert.symdif %>% group_by(which,relation) %>% count() %>% group_by(relation)
bert.symdif %>% group_by(which,relation) %>% count() %>% group_by(relation,which) %>% summarise()
x <- bert.symdif %>% group_by(which,relation) %>% count() %>% group_by(relation,which) %>% summarise()
View(x)
x <- bert.symdif %>% group_by(which,relation) %>% count()
p.bert.symdif <- runrf(maketraindf_norelation(bert.symdif %>% mutate(acc=which)),
"Sym diff, BERT\n"  ,mtry=3,min.node.size=1)
bert.symdif %>% group_by(which) %>% summarise(meanpmi=mean(pmi_sum))
p.bert.symdif
maketraindf_norelation_nopmi <- function(df){
df %>%
mutate(y = as.factor(acc),
class_pair=class12,
simple_POS_pair=simple_POS_12,
POS1 = XPOS1,
POS2 = XPOS2,
POS_pair = XPOS12) %>%
select(c(y #,gold_edge,pmi_edge_sum,pmi_edge_none,pmi_edge_tril,pmi_edge_triu
,sentence_index
,lin_dist,simple_POS_1,simple_POS_2,i1,i2,w1,w2
,class1,class2
#,relation
#,pmi_tril,pmi_triu,pmi_sum
#,UPOS12,UPOS1,UPOS2
#,class12,simple_POS_12,XPOS1,XPOS2,XPOS12 # these ones are just renamed
,class_pair,simple_POS_pair#,POS1,POS2,POS_pair # as these
))
}
p.bert.symdif <- runrf(maketraindf_norelation_nopmi(bert.symdif %>% mutate(acc=which)),
"Sym diff, BERT\n"  ,mtry=3,min.node.size=1)
p.bert.symdif
p.xlnet.symdif <- runrf(maketraindf_norelation_nopmi(xlnet.symdif %>% mutate(acc=which)),
"Sym diff, BERT\n"  ,mtry=3,min.node.size=1)
grid.arrange(p.bert.symdif, p.xlnet.symdif, p.xlm.symdif,nrow=1)
p.xlnet.symdif
p.bert.symdif
p.xlm.symdif <- runrf(maketraindf_norelation_nopmi(xlm.symdif %>% mutate(acc=which)),
"Sym diff, BERT\n"  ,mtry=3,min.node.size=1)
grid.arrange(p.bert.symdif, p.xlnet.symdif, p.xlm.symdif,nrow=1)
p.xlnet.symdif <- runrf(maketraindf_norelation_nopmi(xlnet.symdif %>% mutate(acc=which)),
"Sym diff, XLNet\n"  ,mtry=3,min.node.size=1)
p.xlm.symdif <- runrf(maketraindf_norelation_nopmi(xlm.symdif %>% mutate(acc=which)),
"Sym diff, XLM\n"  ,mtry=3,min.node.size=1)
grid.arrange(p.bert.symdif, p.xlnet.symdif, p.xlm.symdif,nrow=1)
meanpmi_diff_plot <- function(df){
df %>% ggplot(aes(x=factor(which),y=pmi_sum)) %>% geom_violin()
}
meanpmi_diff_plot(bert.symdif)
df %>% ggplot(aes(x=factor(which),y=pmi_sum)) + geom_violin()
meanpmi_diff_plot(bert.symdif)
meanpmi_diff_plot <- function(df){
df %>% ggplot(aes(x=factor(which),y=pmi_sum)) + geom_violin()
}
meanpmi_diff_plot(bert.symdif)
bert.symdif %>% ggplot(aes(x=factor(which),y=pmi_sum)) + geom_violin()
symdif.df <- bind_rows(bert.symdif %>% mutate(model="BERT"),
xlnet.symdif %>% mutate(model="XLNet"),
xlm.symdif %>% mutate(model="XLM"))
View(symdif.df)
symdif.df %>% ggplot(aes(x=factor(which),y=pmi_sum)) + geom_violin()
symdif.df %>% ggplot(aes(x=factor(which),y=pmi_sum,colour=model)) + geom_violin()
symdif.df %>% ggplot(aes(x=factor(which),y=pmi_sum,colour=model)) + geom_barplot()
symdif.df %>% ggplot(aes(x=factor(which),y=pmi_sum,colour=model)) + geom_box()
symdif.df %>% ggplot(aes(x=factor(which),y=pmi_sum,colour=model)) + geom_boxplot()
symdif.df %>% ggplot(aes(y=pmi_sum,colour=model)) + geom_boxplot()
symdif.df %>% ggplot(aes(y=pmi_sum,colour=model)) + facet_wrap(~which)+  geom_boxplot()
symdif.df %>% ggplot(aes(y=pmi_sum,colour=model)) + facet_wrap(~which) +  geom_boxplot() + theme_dark()
symdif.df %>% ggplot(aes(y=pmi_sum,colour=model)) + facet_wrap(~which) +  geom_boxplot() + theme_
symdif.df %>% ggplot(aes(y=pmi_sum,colour=model)) + facet_wrap(~which) +  geom_boxplot() + theme_light()
symdif.df %>% ggplot(aes(y=pmi_sum,colour=model)) + facet_wrap(~which) +
geom_boxplot() + coord_flip() + theme_light()
symdif.df %>% ggplot(aes(y=pmi_sum,colour=model)) + facet_wrap(~which) +
geom_boxplot() + theme_light()
symdif.df %>% ggplot(aes(y=pmi_sum,colour=model)) + facet_wrap(~which) +
geom_boxplot() + theme_classic()
symdif.df %>% ggplot(aes(y=pmi_sum,colour=model)) + facet_wrap(~which) +
geom_boxplot() + theme(axis.line.x = element_blank()) + theme_classic()
symdif.df %>% ggplot(aes(y=pmi_sum,colour=model)) + facet_wrap(~which) +
geom_boxplot() + theme(axis.line.x = element_blank()) + themelight()
symdif.df %>% ggplot(aes(y=pmi_sum,colour=model)) + facet_wrap(~which) +
geom_boxplot() + theme(axis.line.x = element_blank())
symdif.df %>% ggplot(aes(y=pmi_sum,colour=model)) + facet_wrap(~which) +
geom_boxplot() + theme(axis.line.x = element_blank()) + theme_gray()
symdif.df %>% ggplot(aes(x=factor(which),y=pmi_sum,colour=model))  +
geom_boxplot() + theme(axis.line.x = element_blank()) + theme_gray()
symdif.df %>% ggplot(aes(x=factor(which),y=pmi_sum,colour=model)) + scale_y_log10() +
geom_boxplot() + theme(axis.line.x = element_blank()) + theme_gray()
symdif.df %>% ggplot(aes(x=factor(which),y=pmi_sum,colour=model)) + scale_y_sqrt() +
geom_boxplot() + theme(axis.line.x = element_blank()) + theme_gray()
symdif.df %>% ggplot(aes(x=factor(which),y=pmi_sum,colour=model)) +
geom_boxplot() + theme(axis.line.x = element_blank()) + theme_gray()
library(tidyverse)
library(gridExtra)
## Exploratory Plotting ####
##
##
bert <- read_csv("wordpair_bert-large-cased_pad60_2020-04-09-13-57.csv")
xlnet<- read_csv("wordpair_xlnet-base-cased_pad30_2020-04-09-19-11.csv")
xlm  <- read_csv("wordpair_xlm-mlm-en-2048_pad60_2020-04-09-20-43.csv")
make_simple_pos <- function(XPOS){
return(
case_when(
XPOS %in% c("JJ", "JJR", "JJS")               ~ "Adjective",
XPOS %in% c("NN", "NNS", "NNPS", "NNP")       ~ "Noun",
XPOS %in% c("RB", "RBR", "RBS")               ~ "Adverb",
XPOS %in% c("VB", "VBZ", "VBN", "VBG", "VBP", "VBD") ~ "Verb",
XPOS %in% c("PRP$","WP$")                     ~ "Possessive",
XPOS %in% c("IN","TO")                        ~ "Preposition", # needs work... TO isn't just preposition
XPOS %in% c("DT")                             ~ "Determiner",
XPOS %in% c("CD")                             ~ "Cardinal",
XPOS %in% c("WDT")                            ~ "Complementizer",
# ADD CLAUSAL COMPLEMENTIZERS
TRUE ~ as.character(XPOS)))
}
prepare_proportion <- function(df){
df <- df %>%
mutate(acc=gold_edge==pmi_edge_sum,
simple_POS_1 = make_simple_pos(XPOS1),
simple_POS_2 = make_simple_pos(XPOS2),
simple_POS_12 = paste(simple_POS_1,simple_POS_2,sep = '-'))
df$relation[is.na(df$relation)]<-"NONE"
df$UPOS12 <- factor(paste(df$UPOS1,df$UPOS2,sep = '-'))
df$XPOS12 <- factor(paste(df$XPOS1,df$XPOS2,sep = '-'))
return(df)
}
bert <- prepare_proportion(bert)
xlnet<- prepare_proportion(xlnet)
xlm  <- prepare_proportion(xlm)
count_proportion_in_order <- function(dataframe, POSpair){
#' Gets the proportion of edges of the type POS1-POS2 in that order, versus in either order in the data.
#' Note: It doesn't matter what model dataframe you use, and doesn't matter what the gold arcs are either.
#'       Result is just about the sentence data.
dataframe = dataframe %>% filter((simple_POS_1 == POSpair[1] & simple_POS_2 == POSpair[2]) | (simple_POS_1 == POSpair[2] & simple_POS_2 == POSpair[1]))
denom = count(dataframe)[[1]]
dataframe = dataframe %>% filter(simple_POS_1 == POSpair[1] & simple_POS_2 == POSpair[2])
num = count(dataframe)[[1]]
return(denom)
}
count_proportion_in_order_edge <- function(dataframe, edge, POSpair){
#' Gets the proportion of edges of the type POS1-POS2 in that order, versus in either order, that are edges
dataframe = dataframe %>% filter((simple_POS_1 == POSpair[1] & simple_POS_2 == POSpair[2]) | (simple_POS_1 == POSpair[2] & simple_POS_2 == POSpair[1]))
denom = sum(dataframe[[edge]])
dataframe = dataframe %>% filter(simple_POS_1 == POSpair[1]  & simple_POS_2 == POSpair[2])
num = sum(dataframe[[edge]])
return(denom)
}
proportion_in_order <- function(dataframe, POSpair){
#' Gets the proportion of edges of the type POS1-POS2 in that order, versus in either order in the data.
#' Note: It doesn't matter what model dataframe you use, and doesn't matter what the gold arcs are either.
#'       Result is just about the sentence data.
dataframe = dataframe %>% filter((simple_POS_1 == POSpair[1] & simple_POS_2 == POSpair[2]) | (simple_POS_1 == POSpair[2] & simple_POS_2 == POSpair[1]))
denom = count(dataframe)[[1]]
dataframe = dataframe %>% filter(simple_POS_1 == POSpair[1] & simple_POS_2 == POSpair[2])
num = count(dataframe)[[1]]
return(num/denom)
}
proportion_in_order_edge <- function(dataframe, edge, POSpair){
#' Gets the proportion of edges of the type POS1-POS2 in that order, versus in either order, that are edges
dataframe = dataframe %>% filter((simple_POS_1 == POSpair[1] & simple_POS_2 == POSpair[2]) | (simple_POS_1 == POSpair[2] & simple_POS_2 == POSpair[1]))
denom = sum(dataframe[[edge]])
dataframe = dataframe %>% filter(simple_POS_1 == POSpair[1]  & simple_POS_2 == POSpair[2])
num = sum(dataframe[[edge]])
return(num/denom)
}
POSpairs = list(
c("Adjective","Noun"),
c("Determiner","Noun"),
# c("Preposition","Noun"),
# c("Adverb","Noun"),
c("Adverb","Verb"),
# c("Determiner","Cardinal"),
c("Cardinal","Noun"),
c("Possessive","Noun"),
c("Complementizer", "Verb"))
POSpair_num.df <- tibble(
"POSpair" = sapply(POSpairs, paste, collapse = "-"),
"baseline"= sapply(POSpairs, count_proportion_in_order, dataframe = bert),
"gold" = sapply(POSpairs, count_proportion_in_order_edge, dataframe = bert, edge = "gold_edge"),
"BERT" = sapply(POSpairs, count_proportion_in_order_edge, dataframe = bert, edge = "pmi_edge_sum"),
"XLNet"= sapply(POSpairs, count_proportion_in_order_edge, dataframe = xlnet, edge = "pmi_edge_sum"),
"XLM"  = sapply(POSpairs, count_proportion_in_order_edge, dataframe = xlm, edge = "pmi_edge_sum")) %>%
pivot_longer(-c(POSpair), names_to = "arctype", values_to = "num")%>%
mutate(arctype = fct_relevel(factor(arctype),"baseline","gold","BERT","XLNet","XLM"))
POSpair_proportion.df <- tibble(
"POSpair" = sapply(POSpairs, paste, collapse = "-"),
"baseline"= sapply(POSpairs, proportion_in_order, dataframe = bert),
"gold" = sapply(POSpairs, proportion_in_order_edge, dataframe = bert, edge = "gold_edge"),
"BERT" = sapply(POSpairs, proportion_in_order_edge, dataframe = bert, edge = "pmi_edge_sum"),
"XLNet"= sapply(POSpairs, proportion_in_order_edge, dataframe = xlnet, edge = "pmi_edge_sum"),
"XLM"  = sapply(POSpairs, proportion_in_order_edge, dataframe = xlm, edge = "pmi_edge_sum")) %>%
pivot_longer(-c(POSpair), names_to = "arctype", values_to = "proportion")%>%
mutate(arctype = fct_relevel(factor(arctype),"baseline","gold","BERT","XLNet","XLM"))
joined <-
full_join(POSpair_proportion.df,POSpair_num.df,by=c("POSpair","arctype"))
joined  %>%
ggplot(aes(x=reorder(POSpair,-proportion),y=proportion,fill=arctype)) +
geom_bar(stat='identity', position='dodge') +
geom_text(aes(x = reorder(POSpair,-proportion), y = -Inf, colour=arctype, label=num), show.legend = F,
position = position_dodge(width = 1), vjust = 0, hjust=0.5, size = 2, angle=45) +
coord_cartesian(clip = "off") + annotate("text",x=Inf,y=-Inf, label="n total", size=2.5, hjust=0, vjust=0, colour="grey") +
# geom_text(data=POSpair_num.df, aes(x=POSpair,label=n,y=Inf), hjust=0, size=3) +
labs(x="Type of POS pair", y="Proportion of edges in given order", fill="Arc type") +
ggtitle("Proportion of edges in given order,  by model, for selected types of POS pairs")
## Making open/closed class feature #
open_xpos <-
c("JJ", "JJR", "JJS",
"RB", "RBR", "RBS",
"NN", "NNS", "NNPS", "NNP", "VBN",
"VB", "VBZ", "VBG", "VBD", "VBP", "FW", "RP", "WRB")
closed_xpos <-
c("DT", "CD", "CC", "IN",
"PRP", "POS", "PRP$", "WP$",
"PDT", "WDT", "WP", "EX", "TO", "MD", "LS", "UH")
add_class_predictor <- function(df){
df <- df %>%
mutate(class1=if_else(XPOS1 %in% open_xpos,if_else(relation=="neg","CLOSED","OPEN"),
if_else(XPOS1 %in% closed_xpos,"CLOSED","?"))) %>%
mutate(class2=if_else(XPOS2 %in% open_xpos,"OPEN",
if_else(XPOS2 %in% closed_xpos,"CLOSED","?")))
df <- df %>%
mutate(class1=case_when(
XPOS1 %in% open_xpos   ~ if_else(relation=="neg","CLOSED","OPEN"),
XPOS1 %in% closed_xpos ~ "CLOSED",
TRUE                   ~ "?")) %>%
mutate(class2=case_when(
XPOS2 %in% open_xpos   ~ "OPEN",
XPOS2 %in% closed_xpos ~ "CLOSED",
TRUE                   ~ "?"))
df$class12 <- factor(paste(df$class1,df$class2,sep = '-'))
return(df)
}
bert <-add_class_predictor(bert)
xlnet<-add_class_predictor(xlnet)
xlm  <-add_class_predictor(xlm)
#########################################
# Running a random forest classifier ####
#########################################
gg_varimp <- function(ranger,title) {
#' just a ggplot2 version of dotplot varimp.
#' input ranger model object, to plot variable importance
ggplot(stack(ranger$variable.importance),
aes(x=reorder(ind,values), y=values))+
geom_point() +
coord_flip() +
ylab("Information value (Gini corrected)")+
xlab("Variable")+
ggtitle(paste(title,"OOB err = ",
round(ranger$prediction.error, digits=3),
sep="")) #+
# guides(fill=F) + scale_fill_gradient(low="red", high="blue")
}
# Gridsearch for best model
library(caret)
library(ranger)
maketraindf_gold <- function(df){
df %>% filter(gold_edge==T) %>%
mutate(y = as.factor(acc),
class_pair=class12,
simple_POS_pair=simple_POS_12,
POS1 = XPOS1,
POS2 = XPOS2,
POS_pair = XPOS12) %>%
select(c(y #,gold_edge,sentence_index,pmi_edge_sum,pmi_edge_none,pmi_edge_tril,pmi_edge_triu
,lin_dist,simple_POS_1,simple_POS_2,i1,i2,w1,w2
,class1,class2
,relation
,pmi_tril,pmi_triu,pmi_sum
#,UPOS12,UPOS1,UPOS2
#,class12,simple_POS_12,XPOS1,XPOS2,XPOS12 # these ones are just renamed
,class_pair,simple_POS_pair#,POS1,POS2,POS_pair # as these
))
}
maketraindf_pmi <- function(df){
df %>% filter(pmi_edge_sum==T) %>%
mutate(y = as.factor(acc),
class_pair=class12,
simple_POS_pair=simple_POS_12,
POS1 = XPOS1,
POS2 = XPOS2,
POS_pair = XPOS12) %>%
select(c(y #,gold_edge,sentence_index,pmi_edge_sum,pmi_edge_none,pmi_edge_tril,pmi_edge_triu
,lin_dist,simple_POS_1,simple_POS_2,i1,i2,w1,w2
,class1,class2
#,relation
,pmi_tril,pmi_triu,pmi_sum
#,UPOS12,UPOS1,UPOS2
#,class12,simple_POS_12,XPOS1,XPOS2,XPOS12 # these ones are just renamed
,class_pair,simple_POS_pair#,POS1,POS2,POS_pair # as these
))
}
maketraindf_all <- function(df){
df %>%
mutate(y = as.factor(acc),
class_pair=class12,
simple_POS_pair=simple_POS_12,
POS1 = XPOS1,
POS2 = XPOS2,
POS_pair = XPOS12) %>%
select(c(y #,gold_edge,sentence_index,pmi_edge_sum,pmi_edge_none,pmi_edge_tril,pmi_edge_triu
,lin_dist,simple_POS_1,simple_POS_2,i1,i2,w1,w2
,class1,class2
,relation
,pmi_tril,pmi_triu,pmi_sum
#,UPOS12,UPOS1,UPOS2
#,class12,simple_POS_12,XPOS1,XPOS2,XPOS12 # these ones are just renamed
,class_pair,simple_POS_pair#,POS1,POS2,POS_pair # as these
))
}
maketraindf_norelation <- function(df){
df %>%
mutate(y = as.factor(acc),
class_pair=class12,
simple_POS_pair=simple_POS_12,
POS1 = XPOS1,
POS2 = XPOS2,
POS_pair = XPOS12) %>%
select(c(y #,gold_edge,sentence_index,pmi_edge_sum,pmi_edge_none,pmi_edge_tril,pmi_edge_triu
,lin_dist,simple_POS_1,simple_POS_2,i1,i2,w1,w2
,class1,class2
#,relation
,pmi_tril,pmi_triu,pmi_sum
#,UPOS12,UPOS1,UPOS2
#,class12,simple_POS_12,XPOS1,XPOS2,XPOS12 # these ones are just renamed
,class_pair,simple_POS_pair#,POS1,POS2,POS_pair # as these
))
}
runrf <- function(df,name,mtry=3,min.node.size=1){
ptm <- proc.time()
training.df = df
# ranger.fit = train(
#   y = training.df$acc,
#   x = training.df %>% select(-acc),
#   method = 'ranger',
#   num.trees = 500,
#   tuneGrid = expand.grid(mtry = c(3,4,5,6),
#                          splitrule = c("gini"),
#                          min.node.size = c(1,2)),
#   trControl = trainControl(
#     search = "grid", method = "cv", number = 5, verboseIter = TRUE)
# )
# print(ranger.fit)
# print(ranger.fit$bestTune)
# Run best fit model
rf <- ranger(
y ~ ., local.importance = FALSE,
mtry = mtry, num.trees = 2000, min.node.size = min.node.size, splitrule = "gini",
importance = "impurity_corrected", save.memory = TRUE,
data = training.df,
)
library(gridExtra)
cm <- rf$confusion.matrix
print(proc.time() - ptm)
# print(importance_pvalues(rf, method = "janitza"))
print(cm)
return(gg_varimp(rf,name))
}
p.bert.gold <- runrf(maketraindf_gold(bert), "gold subset, BERT\n" ,mtry=3,min.node.size=1)
symdif <- function(df){
df <- df %>% mutate(acc=gold_edge==pmi_edge_sum)
df.gold <- df %>% filter(gold_edge==T)
df.pmi <- df %>% filter(pmi_edge_sum==T)
df.union <- rbind(df.gold, df.pmi)
df.symdif <- df.union %>% filter(!(gold_edge==T & pmi_edge_sum==T)) %>%
mutate(which = factor(
case_when(gold_edge == T    ~ "gold",
pmi_edge_sum == T ~ "pmi",
TRUE ~ "error!")))
return(df.symdif)
}
xlnet.symdif <- symdif(xlnet)
bert.symdif <- symdif(bert)
xlm.symdif <- symdif(xlm)
maketraindf_norelation_nopmi <- function(df){
df %>%
mutate(y = as.factor(which),
class_pair=class12,
simple_POS_pair=simple_POS_12,
POS1 = XPOS1,
POS2 = XPOS2,
POS_pair = XPOS12) %>%
select(c(y #,gold_edge,pmi_edge_sum,pmi_edge_none,pmi_edge_tril,pmi_edge_triu
,sentence_index
,lin_dist,simple_POS_1,simple_POS_2,i1,i2,w1,w2
,class1,class2
#,relation
#,pmi_tril,pmi_triu,pmi_sum
#,UPOS12,UPOS1,UPOS2
#,class12,simple_POS_12,XPOS1,XPOS2,XPOS12 # these ones are just renamed
,class_pair,simple_POS_pair#,POS1,POS2,POS_pair # as these
))
}
View(bert)
#  ggplot(aes(x=n)) +geom_histogram()
bert %>% filter(gold_edge) %>% .$relation
library(tidyverse)
#  ggplot(aes(x=n)) +geom_histogram()
bert %>% filter(gold_edge) %>% .$relation
#  ggplot(aes(x=n)) +geom_histogram()
bert %>% filter(gold_edge) %>% select(relation) %>% levels
#  ggplot(aes(x=n)) +geom_histogram()
bert %>% filter(gold_edge) %>% select(relation) %>% as.factor()%>% levels()
#  ggplot(aes(x=n)) +geom_histogram()
bert %>% filter(gold_edge) %>% select(relation) %>% as.factor() %>% levels()
#  ggplot(aes(x=n)) +geom_histogram()
bert %>% filter(gold_edge) %>% select(relation) %>% as.factor()
#  ggplot(aes(x=n)) +geom_histogram()
bert %>% filter(gold_edge) %>% select(relation) %>% as.factor() %>% .$levels
#  ggplot(aes(x=n)) +geom_histogram()
bert %>% filter(gold_edge) %>% select(relation) %>% as.factor() %>% .$Levels
#  ggplot(aes(x=n)) +geom_histogram()
bert %>% filter(gold_edge) %>% select(relation) %>% as.factor()
